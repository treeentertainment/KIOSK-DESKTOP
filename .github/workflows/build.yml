name: Build App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            args: --mac
            artifact-name: mac-artifact

          - os: ubuntu-latest
            args: --linux
            artifact-name: linux-artifact

          - os: windows-latest
            args: --win
            artifact-name: win-artifact

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build Electron App
        run: npm run build -- ${{ matrix.args }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: dist/
          retention-days: 3

  check-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract commit description and check for "Official"
        id: check
        run: |
          DESC=$(git log -1 --pretty=%B | tail -n +2)
          echo "Commit Description:"
          echo "$DESC"
          if echo "$DESC" | grep -iq "Official"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: [build, check-release]
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.sha }}
          tag_name: v-${{ github.run_number }}
          files: |
            artifacts/**/*.exe
            artifacts/**/*.AppImage
            artifacts/**/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-delete-history:
    runs-on: ubuntu-latest
    outputs:
      should_delete: ${{ steps.check.outputs.should_delete }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract commit description and check for "delete-history"
        id: check
        run: |
          DESC=$(git log -1 --pretty=%B | tail -n +2)
          echo "Commit Description:"
          echo "$DESC"
          if echo "$DESC" | grep -iq "delete-history"; then
            echo "should_delete=true" >> $GITHUB_OUTPUT
          else
            echo "should_delete=false" >> $GITHUB_OUTPUT
          fi

  delete-history:
    needs: check-delete-history
    if: needs.check-delete-history.outputs.should_delete == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create exclude.txt if not exists
        run: touch exclude.txt

      - name: Read exclude.txt to get excluded run IDs
        id: get_excludes
        run: |
          EXCLUDES=$(paste -sd, exclude.txt)
          echo "excluded_runs=$EXCLUDES" >> $GITHUB_OUTPUT

      - name: Delete previous runs (excluding exclude.txt list)
        env:
          REPO: ${{ github.repository }}
          EXCLUDED_RUNS: ${{ steps.get_excludes.outputs.excluded_runs }}
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          IFS=',' read -ra EXCLUDE_ARRAY <<< "$EXCLUDED_RUNS"
          CURRENT_RUN_ID=${{ github.run_id }}

          gh api "repos/$REPO/actions/runs" --paginate --jq '.workflow_runs[].id' | while read run_id; do
            if [[ ! " ${EXCLUDE_ARRAY[@]} " =~ " $run_id " && "$run_id" != "$CURRENT_RUN_ID" ]]; then
              echo "Deleting run $run_id"
              gh api -X DELETE "repos/$REPO/actions/runs/$run_id" --silent
            fi
          done

  save-run-id:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create exclude.txt if not exists
        run: touch exclude.txt

      - name: Append this run ID to exclude.txt
        run: |
          echo "${{ github.run_id }}" >> exclude.txt
          sort -u exclude.txt -o exclude.txt
          cat exclude.txt

      - name: Commit and push exclude.txt
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add exclude.txt
          git commit -m "Add run ID to exclude.txt"
          git push
